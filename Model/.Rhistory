A <- matrix(2,1,1,2)
A
?"matrix"
A <- matrix(data = c(2,1,1,2), 2,2)
A
is.positive.definite(A)
install.packages("matrixcalc")
library(matrixcalc)
A <- matrix(data = c(2,1,1,2), 2,2)
is.positive.definite(A)
?transpose
At <- t(A)
At
svd(A)
Cholesky(A)
Cholesky(A)
chol(A)
B * t(B)
B <- chol(A)
B * t(B)
B <- chol(A, pivot = FALSE, ...)
B <- chol(A, pivot = FALSE)
B * t(B)
B <- chol(A, pivot = T)
B * t(B)
B %*%  t(B)
B <- chol(A, pivot = F)
View(B)
t(B)
B %*%  B
B
t(B)
B %*%  t(B)
B *  t(B)
B%*%A
C<-matrix(data = c(2,0,0,6,1,0,-8,5,3), 3,3)
View(C)
C<-matrix(data = c(2,6,-8,0,1,5,0,0,3), 3,3)
View(C)
t(C)
C %*% t(C)
D <- C %*% t(C)
chol(D)
is.positive.semi.definite(A)
Conj(t(B))
B %*%  Conj(t(B))
B %*%  t(B)
Conj(t(A))
Act <- Conj(t(A))
A=Act
A==Act
identical(A, Act)
identical(A, At) #Hermitian
?is.positive.definite
func(is.positive.definite)
getMethod(is.positive.definite)
getMethod("is.positive.definite")
showMethods("is.positive.definite")
is.positive.definite
svd(A)
z <- svd(A)
z[1]
z[2] %*% t(z[2])
class(z[2])
class(z[[2])
class(z[[2]])
z[[2]] %*% t(z[[2]])
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
?rnorm
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
bins <- seq(min(x), max(x), length.out = 11 + 1)
x    <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = 11 + 1)
rnorm(10,  breaks = bins, col = 'darkgray', border = 'white')
?break
?breaks
??breaks
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
?if
;
?if
;
??if
;
?if()
?lnorm
??lnorm
rexp(10)
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
bins <- seq(min(dist), max(dist), length.out = input$bins + 1)
hist(dist, breaks = bins, col = col, border = 'white')
col <- "steelblue2"
dist <-  rnorm(input$obs)
dist <-  rnorm(100)
hist(dist, breaks = bins, col = col, border = 'white')
bins <- seq(min(dist), max(dist), length.out = input$bins + 1)
bins <- seq(min(dist), max(dist), length.out = 10 + 1)
hist(dist, breaks = bins, col = col, border = 'white')
hist$col
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
shiny::runApp('Coursera/Developing_Data_Products/ShinyApp')
title       : Distribution Histogram Generator
colsums(a)
colSums(a)
install.packages("C:/Users/User/Downloads/DDPQuiz3_1.0.zip", repos = NULL, type = "win.binary")
createmean
library(DDPQuiz3)
install.packages(c("car", "caret", "CORElearn", "curl", "doParallel", "foreach", "forecast", "iterators", "lme4", "MatrixModels", "quantreg", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "rmarkdown", "scales"))
install.packages("C:/Users/User/Downloads/DDPQuiz3_1.0.zip", repos = NULL, type = "win.binary")
library(DDPQuiz3)
lm
colSums
dgamma
?getMethod()
?showMethods()
?lm
?dgamma
UseMethod(lm)
UseMethod(dgamma)
UseMethod("dgamma")
UseMethod("lm")
?UseMethod
?mean()
?lm()
?dgamma
?colSums
lm
source('~/.active-rstudio-document')
apply(blogs,2,max)
apply(blogs,MARGIN=C(2),max)
apply(blogs,2,length)
apply(blogs,2,nchar)
max(apply(blogs,2,nchar))
max(apply(news,2,nchar))
max(apply(twitter,2,nchar))
shiny::runApp('Coursera/WordPrediction_NLP/ShinyApp')
shiny::runApp('Coursera/WordPrediction_NLP/ShinyApp')
bigramRed <- readRDS("../Staging/ReducedBigram.Rda")
trigramRed <- readRDS("../Staging/ReducedTrigram.Rda")
quadgramRed <- readRDS("../Staging/ReducedQuadgram.Rda")
setwd("~/Coursera/WordPrediction_NLP/Model")
bigramRed <- readRDS("../Staging/ReducedBigram.Rda")
trigramRed <- readRDS("../Staging/ReducedTrigram.Rda")
quadgramRed <- readRDS("../Staging/ReducedQuadgram.Rda")
biModel <- t(data.frame(sapply(as.character(bigramRed$NGram), strsplit, split = " ")))
biModel <- cbind(bigramRed,biModel)
colnames(biModel) <- c("NGram", "Count", "Word1", "Word2")
triModel <- t(data.frame(sapply(as.character(trigramRed$NGram), strsplit, split = " ")))
triModel <- cbind(trigramRed,triModel)
colnames(triModel) <- c("NGram", "Count", "Word1", "Word2", "Word3")
quadModel <- t(data.frame(sapply(as.character(quadgramRed$NGram), strsplit, split = " ")))
quadModel <- cbind(quadgramRed,quadModel)
colnames(quadModel) <- c("NGram", "Count", "Word1", "Word2", "Word3", "Word4")
saveRDS(biModel, file = "../ShinyApp/biModel.Rda")
saveRDS(triModel, file = "../ShinyApp/triModel.Rda")
saveRDS(quadModel, file = "../ShinyApp/quadModel.Rda")
shiny::runApp('~/Coursera/WordPrediction_NLP/ShinyApp')
shiny::runApp('~/Coursera/WordPrediction_NLP/ShinyApp')
shiny::runApp('~/Coursera/WordPrediction_NLP/ShinyApp')
shiny::runApp('~/Coursera/WordPrediction_NLP/ShinyApp')
shiny::runApp('~/Coursera/WordPrediction_NLP/ShinyApp')
shiny::runApp('~/Coursera/WordPrediction_NLP/ShinyApp')
shiny::runApp('~/Coursera/WordPrediction_NLP/ShinyApp')
shiny::runApp('~/Coursera/WordPrediction_NLP/ShinyApp')
